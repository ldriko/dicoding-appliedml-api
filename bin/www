#!/usr/bin/env node

/**
 * Module dependencies.
 */

(async () => {
    const app = await require("../app").init();
    const debug = require("debug")("dicoding-appliedml-api:server");
    const http = require("http");

    /**
     * Get port from environment and store in Express.
     */

    const port = normalizePort(process.env.PORT || "3000");
    app.set("port", port);

    /**
     * Create HTTP server.
     */

    const server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        const port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(err, req, res) {
        if (res.headersSent) {
            return next(err);
        }
        return res.status(400).json({
            status: "fail",
            message: "Terjadi kesalahan dalam melakukan prediksi",
        });
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        const addr = server.address();
        const bind =
            typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
        console.log("Server is running on port " + addr.port);
        debug("Listening on " + bind);
    }
})();
